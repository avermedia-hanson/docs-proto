{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AVerMedia Developer Hub","text":"<p>This is a prototype for the AVerMedia Developer Hub (tentative name), a site for developers to learn about AVerMedia products and technologies. This site is built with Material for MkDocs, a documentation tool based on MkDocs.</p> <p>The main contents are in the Softwares section, where we demonstrate some of the features of this site and different ways to handle documentation of software products.</p>      This is a random image from Lorem Picsum."},{"location":"#section-1","title":"Section 1","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>"},{"location":"#section-2","title":"Section 2","text":"<p>Lorem ipsum odor amet, consectetuer adipiscing elit. Conubia platea etiam fusce massa eros. Aenean viverra consequat facilisi at hendrerit luctus. Litora ad posuere commodo magna aptent duis adipiscing. Quam sagittis pellentesque enim felis nullam consequat ridiculus mattis. Suscipit dapibus tellus feugiat suspendisse cubilia.</p> <p>Inceptos tortor habitasse mus id venenatis arcu inceptos libero ex. Per vitae facilisi nisl duis id. Tellus mi tellus ultricies dignissim blandit tempor aliquet. Vehicula risus elementum fringilla, nisl lorem nascetur! Libero vel fames nibh orci fermentum erat sollicitudin. Eu egestas primis nec pellentesque rutrum.</p> <p>Vivamus faucibus lacinia vulputate accumsan ut interdum sapien? Pretium duis vitae himenaeos vestibulum nunc; justo turpis imperdiet. Rutrum dui taciti porta nam varius, suspendisse porta sollicitudin. Leo congue per conubia venenatis amet sociosqu tempus pretium nisl. Ullamcorper scelerisque curabitur posuere finibus viverra in. Pulvinar himenaeos bibendum bibendum sodales non iaculis ultricies vehicula. Per vulputate dis senectus velit dis. At mi per lacus sem sollicitudin nulla. Orci torquent pharetra mattis sit interdum nullam habitant aenean nullam. Urna dolor felis mauris erat aptent; feugiat dictum.</p>"},{"location":"internal/","title":"Internal Documentation","text":"<p>This section is only for internal use. It is supposed to serve as the maintenance guide for this site.</p> <ul> <li>Overview</li> <li>Docs Writing Guide</li> <li>Maintenance Guide</li> </ul>"},{"location":"internal/docs-writing-guide/","title":"Docs Writing Guide","text":"<p>This guide is intended for the developers who are writing the documentation for AVerAI. Here you can find:</p> <ul> <li>The basic rules you should follow to include your documents in this site.</li> <li>The style guide for the documentation.</li> <li>The introduction to the markdown features (including the basic ones and the extensions) that <code>mkdocs-material</code> supports.</li> </ul>"},{"location":"internal/maintenance-guide/","title":"Maintenance Guide","text":""},{"location":"internal/maintenance-guide/#change-the-icons","title":"Change the icons","text":"<p>The current icons are downloaded from our official website. The favicon is stored as <code>assets/images/favicon.png</code>, and the logo is stored as <code>assets/images/logo.png</code>. One can either replace the existing files, or change the <code>logo</code> and <code>favicon</code> settings in the <code>theme</code> section of the <code>mkdocs.yml</code> file.</p>"},{"location":"internal/overview/","title":"Overview","text":""},{"location":"internal/overview/#themeplugin-features","title":"Theme/Plugin Features","text":"<p>Here lists some of the enabled features in this demo site. For the full list of features enabled, please take a look at the <code>mkdocs.yml</code> file.</p>"},{"location":"internal/overview/#navigation","title":"Navigation","text":"<ul> <li>Instant loading: while navigating to an internal page, instead of reloading the whole page, only the content of the new page will be loaded. (The common elements like the header will stay the same, which makes the site look like a single-page application.)</li> <li>Progress indicator: a progress indicator will be shown at the top of the page if the page hasn't finished loading after 400 ms.</li> <li>Tabs: the top-level sections are rendered as tabs below the header. The left sidebar will only contain the sub-sections of the current tab.</li> <li>Sticky tabs: the tabs will stick to the top of the page when scrolling down.</li> <li>Navigation sections: the top-level sections are rendered as groups in the sidebar.</li> <li>Back-to-top button: a back-to-top button will be shown at the top of the page if the page is scrolled down.</li> </ul> <p>For more details, please refer to the Material for MkDocs documentation.</p>"},{"location":"internal/overview/#site-search","title":"Site Search","text":"<p>The built-in search plugin is enabled.</p> <ul> <li>Search suggestions: when typing in the search box, the search plugin will show the most likely completion which can be accepted with <code>\u2192 Right</code> key.</li> <li>Search highlight: the search results will be highlighted with the color of the theme.</li> </ul>"},{"location":"softwares/","title":"Softwares","text":"<p>As the home page of the software tab, our software products may be showcased here.</p> <p>But this is just a prototype, so we are going to demonstrate different ways to handle software documentation, with a bunch of dummy software projects.</p> <p>Here is a brief summary table of the dummy software projects in the demo:</p> Language Dummy Project Name Brief Description C++ Some Streaming SDK <ul><li>Main docs handled by this <code>mkdocs</code> project (this site)</li><li>API reference generated by Doxygen</li></ul> C++ Some Audio SDK <ul><li>Almost all the docs generated by Doxygen</li><li>Only entry page handled by this <code>mkdocs</code> project (this site)</li></ul> C++ Some Video SDK <ul><li>Main docs handled by another <code>mkdocs</code> project</li><li>API reference generated by Doxygen</li></ul> Python Some AI SDK Work in progress <p>Each method has its own pros and cons. It is recommended to take a look at these dummy projects to check the user experience. The pros and cons are listed in the main page of each project. Some of the features of the documentation tools (<code>mkdocs-material</code> and <code>Doxygen</code>) are also demonstrated in pages like \"Getting Started\".</p> <ul> <li> <p> Some Streaming SDK</p> <ul> <li><code>mkdocs</code> docs by main project</li> <li>API reference by Doxygen</li> </ul> <p> Explore the SDK</p> </li> <li> <p> Some Audio SDK</p> <ul> <li>Almost all docs by Doxygen</li> <li><code>mkdocs</code> entry page to different versions</li> </ul> <p> Explore the SDK</p> </li> <li> <p> Some Video SDK</p> <ul> <li><code>mkdocs</code> docs by sub-project</li> <li>API reference by Doxygen</li> </ul> <p> Explore the SDK</p> </li> <li> <p> Some AI SDK</p> <p>Pure Python project, work in progress</p> <p> Explore the SDK</p> </li> </ul>"},{"location":"softwares/some-ai-sdk/","title":"Some AI SDK","text":"<p>Some AI SDK helps you build an AI inference pipeline for your AI application. The only thing we want to demonstrate here is the API reference generated by MkDocs.</p> <ul> <li> <p>Getting Started</p> <p>Nothing to demonstrate here. See the Getting Started of the streaming SDK.</p> <p> Getting Started</p> </li> <li> <p>Examples</p> <p>Nothing to demonstrate here. See the Examples of the streaming SDK.</p> <p> Examples</p> </li> <li> <p>API Reference</p> <p>Different versions of the API reference (generated by MkDocs) are available for this SDK.</p> <p> API Reference</p> </li> </ul>"},{"location":"softwares/some-ai-sdk/getting-started/","title":"Getting Started","text":"<p>Nothing to demonstrate here. See the Getting Started of the streaming SDK.</p>"},{"location":"softwares/some-ai-sdk/examples/","title":"Examples","text":"<p>Nothing to demonstrate here. See the Examples of the streaming SDK.</p>"},{"location":"softwares/some-audio-sdk/","title":"Some Audio SDK","text":"<p>All the documentation for this SDK, except for this entry page, is generated by Doxygen.</p>"},{"location":"softwares/some-audio-sdk/#pros","title":"Pros","text":"<ul> <li>All the pages are properly versioned by the configuration in <code>Doxyfile</code>.</li> </ul>"},{"location":"softwares/some-audio-sdk/#cons","title":"Cons","text":"<ul> <li>The look and feel is too outdated for the tutorial- and guide-style documentation, which makes it look less professional.</li> <li>Only the entry page, not the sub-sections like \"Getting Started\", can be properly integrated into the sidebar of the site<sup>1</sup>.</li> <li>The markdown features supported by Doxygen are limited compared to <code>mkdocs-material</code>.</li> </ul> <p>Note</p> <p>A footnote with a tooltip (hover text) is used here. In the Markdown source code, the text contents are duplicated for the footnote and the tooltip, which is not a good practice. However, the footnote-with-tooltip feature is not included in the community version of <code>mkdocs-material</code> (sponsors only).</p>"},{"location":"softwares/some-audio-sdk/#versions","title":"Versions","text":"<p>The following versions of the documentation are available:</p> <ul> <li>Some Audio SDK 0.7</li> <li>Some Audio SDK 0.6</li> </ul> <ol> <li> <p>It is actually possible to put the links of sub-sections in the sidebar of the main site, but users will feel like they just jump to another site after clicking these links. Therefore, I personally prefer to just put the entry page in the sidebar, as an entry point to the Doxygen documentation.\u00a0\u21a9</p> </li> </ol>"},{"location":"softwares/some-streaming-sdk/","title":"Some Streaming SDK","text":"<p>The main documentation, including the guides, examples, and tutorials, is handled by the main <code>mkdocs</code> project, and the API references for different versions are generated by Doxygen.</p> <p>The pros and cons of this approach are listed below.</p>"},{"location":"softwares/some-streaming-sdk/#pros","title":"Pros","text":"<ul> <li>The sections will have the same look and feel as the site.</li> <li>The sections can be nicely integrated to the left navigation sidebar.</li> </ul>"},{"location":"softwares/some-streaming-sdk/#cons","title":"Cons","text":"<ul> <li>All the sections except the API reference contents are NOT versioned .</li> </ul>"},{"location":"softwares/some-streaming-sdk/#sections","title":"Sections","text":"<ul> <li> <p>Getting Started</p> <p>Almost all the software projects provide a getting started guide, so we have one too. <code>mkdocs-material</code> features like tabs and note/tips boxes are demonstrated here.</p> <p> Getting Started</p> </li> <li> <p>Examples</p> <p>The two use cases in the example section show how the code blocks look in <code>mkdocs-material</code>. Features like line numbers and copy button are enabled.</p> <p> Examples</p> </li> <li> <p>API Reference</p> <p>Several versions of the API reference (generated by Doxygen) are available for this SDK.</p> <p> API Reference</p> </li> </ul>"},{"location":"softwares/some-streaming-sdk/getting-started/","title":"Getting Started","text":"<p>In this section, you can see a collapsible note box, the code blocks in tabs, and a tip box.</p>"},{"location":"softwares/some-streaming-sdk/getting-started/#installation","title":"Installation","text":"<p>The SDK can be easily installed with the following command.</p> For Ubuntu 22.04 users <p>For Ubuntu 22.04, some pre-requisites have to be installed first.</p> <pre><code>echo \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n</code></pre> LinuxWindows <pre><code>echo \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\necho \"Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n</code></pre> <pre><code>Write-Output \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\nWrite-Output \"Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n</code></pre>"},{"location":"softwares/some-streaming-sdk/getting-started/#build-the-pipeline","title":"Build the pipeline","text":"test.py<pre><code>print('Create a pipeline')\nprint('Add the source')\nprint('Add the processor')\nprint('Add the sink')\nprint('Link all the components together')\n</code></pre> <p>Tip</p> <p>You can replace the useless <code>print</code>s with actual code.</p>"},{"location":"softwares/some-streaming-sdk/api/","title":"API Reference","text":"<p>Here we show how to integrate different versions of the API reference generated by Doxygen.</p> <p>The API references are available for the following versions:</p> <ul> <li>1.3 (online | offline)</li> <li>1.2 (online | offline)</li> </ul> <p>Warning</p> <p>The version control for this SDK is actually problematic, because the getting started page and the examples are not versioned.</p> <p>Versioning of the API reference</p> <p>The patch version number and the smaller version numbers should not be included in the API reference, because a patch should not change the API. For example, the API of version 1.3.1 should be the same as the API of version 1.3.0.</p>"},{"location":"softwares/some-streaming-sdk/examples/","title":"Examples","text":"<p>You can see how are the appearance of the code blocks in the following use cases.</p> <p>Here some common use cases of the SDK are demonstrated.</p> <ul> <li> <p>Use case 1</p> <p>Some description about the use case that makes it interesting and, more importantly, makes the card not too empty.</p> <p> See the example</p> </li> <li> <p>Use case 2</p> <p>Yet another description about the second use case that, again, makes it interesting and fills the card.</p> <p> See the example</p> </li> </ul>"},{"location":"softwares/some-streaming-sdk/examples/use-case-1/","title":"Use Case 1","text":"<p>The following is just a ridiculous program generated by Claude.</p> InspirationGenerator.py<pre><code>import random\nfrom typing import List, Tuple\nimport time\n\nclass InspirationGenerator:\n    def __init__(self):\n        self.buzzwords = [\n            \"synergy\", \"paradigm shift\", \"digital transformation\",\n            \"blockchain\", \"AI-powered\", \"cloud-native\", \"quantum\",\n            \"disruptive innovation\", \"machine learning\", \"IoT\"\n        ]\n        self.profound_starts = [\n            \"The key to\", \"The essence of\", \"The future lies in\",\n            \"Success comes from\", \"Innovation begins with\",\n            \"Never underestimate\", \"Always remember that\",\n            \"The secret sauce is\", \"Wisdom teaches us that\"\n        ]\n        self.profound_middles = [\n            \"leveraging\", \"embracing\", \"transforming\",\n            \"revolutionizing\", \"reimagining\", \"disrupting\",\n            \"optimizing\", \"accelerating\", \"empowering\"\n        ]\n        self.profound_ends = [\n            \"in the digital age\", \"for sustainable growth\",\n            \"in the modern ecosystem\", \"at web scale\",\n            \"in the metaverse\", \"with blockchain technology\",\n            \"using neural networks\", \"in real-time\",\n            \"while maintaining work-life balance\"\n        ]\n\n    def generate_quote(self) -&gt; str:\n        return (f\"{random.choice(self.profound_starts)} \"\n                f\"{random.choice(self.profound_middles)} \"\n                f\"{random.choice(self.buzzwords)} \"\n                f\"{random.choice(self.profound_ends)}\")\n\n    def add_emoji_decoration(self, quote: str) -&gt; str:\n        emojis = [\"\u2728\", \"\ud83d\ude80\", \"\ud83d\udca1\", \"\ud83c\udf1f\", \"\ud83c\udfaf\", \"\ud83d\udd2e\", \"\ud83d\udcab\", \"\u2b50\"]\n        return f\"{random.choice(emojis)} {quote} {random.choice(emojis)}\"\n\ndef main():\n    print(\"Welcome to the Corporate Inspiration Generator 3000\u2122\")\n    print(\"Generating life-changing insights...\")\n    time.sleep(1)\n    generator = InspirationGenerator()\n\n    for i in range(5):\n        print(\"\\nGenerating profound wisdom\", end=\"\")\n        for _ in range(3):\n            time.sleep(0.3)\n            print(\".\", end=\"\", flush=True)\n        print(\"\\n\")\n        quote = generator.generate_quote()\n        decorated_quote = generator.add_emoji_decoration(quote)\n        print(decorated_quote)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"softwares/some-streaming-sdk/examples/use-case-2/","title":"Use Case 2","text":"<p>The following is just a ridiculous program generated by Claude.</p> CorporateJargonGenerator.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;random&gt;\n#include &lt;chrono&gt;\n#include &lt;thread&gt;\n\nclass CorporateJargonGenerator {\nprivate:\n    std::vector&lt;std::string&gt; adjectives = {\n        \"synergistic\", \"disruptive\", \"innovative\", \"blockchain-enabled\",\n        \"AI-driven\", \"cloud-native\", \"quantum-inspired\", \"agile\"\n    };\n\n    std::vector&lt;std::string&gt; nouns = {\n        \"paradigm\", \"solution\", \"framework\", \"ecosystem\",\n        \"platform\", \"pipeline\", \"architecture\", \"methodology\"\n    };\n\n    std::vector&lt;std::string&gt; verbs = {\n        \"leverage\", \"optimize\", \"transform\", \"revolutionize\",\n        \"streamline\", \"accelerate\", \"empower\", \"orchestrate\"\n    };\n\n    std::mt19937 rng;\n\npublic:\n    CorporateJargonGenerator() : rng(std::random_device{}()) {}\n\n    std::string generateBuzzPhrase() {\n        auto getRandomElement = [this](const std::vector&lt;std::string&gt;&amp; vec) {\n            std::uniform_int_distribution&lt;&gt; dist(0, vec.size() - 1);\n            return vec[dist(rng)];\n        };\n\n        return getRandomElement(adjectives) + \" \" +\n               getRandomElement(nouns) + \" to \" +\n               getRandomElement(verbs) + \" your business\";\n    }\n\n    void displayWithSpinner() {\n        std::cout &lt;&lt; \"Generating revolutionary business insights\";\n        for (int i = 0; i &lt; 3; ++i) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(500));\n            std::cout &lt;&lt; \".\" &lt;&lt; std::flush;\n        }\n        std::cout &lt;&lt; \"\\n\\n\ud83d\ude80 \" &lt;&lt; generateBuzzPhrase() &lt;&lt; \" \ud83d\udcab\\n\" &lt;&lt; std::endl;\n    }\n};\n\nint main() {\n    std::cout &lt;&lt; \"Welcome to the Enterprise Jargon Generator 5000\u2122\\n\" &lt;&lt; std::endl;\n\n    CorporateJargonGenerator generator;\n\n    for (int i = 0; i &lt; 5; ++i) {\n        generator.displayWithSpinner();\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    }\n\n    std::cout &lt;&lt; \"\\nThank you for leveraging our synergistic solution!\\n\";\n    return 0;\n}\n</code></pre>"}]}